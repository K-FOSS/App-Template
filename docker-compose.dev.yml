version: '3.7'

networks:
  internalDB:
  publicWeb:

services:
  Web:
    image: caddy/caddy:scratch
    restart: unless-stopped
    command: ['run', '--config', '/etc/caddy/Caddyfile.json']
    volumes:
      - ./Caddyfile.json:/etc/caddy/Caddyfile.json
      - staticWeb:/app/public/static:ro
      - tlsCertificates:/TLS:ro
    ports:
      - 8085:8085
      - 443:443
    networks:
      - publicWeb

  API:
    build:
      context: ./API/
      dockerfile: Dockerfile.dev
    image: kristianfoss/development/app-template-api
    command: /bin/sh -c "while sleep 1000; do :; done"
    networks:
      - internalDB
      - publicWeb
    volumes:
      - ./.git:/workspace/.git:cached
      - ./UI:/workspace/UI:ro
      - ./.gitignore:/workspace/.gitignore:cached
      - apiModules:/workspace/API/node_modules
      - ./API:/workspace/API:delegated
      # GraphQL Schema File Generated By API
  #      - ./Schema.graphql:/workspace/API/Schema.graphql:cached

  UI:
    build:
      context: ./UI/
      dockerfile: Dockerfile.dev
    image: kristianfoss/development/app-template-ui
    command: /bin/sh -c "while sleep 1000; do :; done"
    environment:
      DOMAIN: 'localhost.kristianjones.dev'
    networks:
      - publicWeb
    volumes:
      - ./.git:/workspace/.git:cached
      - ./.gitignore:/workspace/.gitignore:cached
      - uiModules:/workspace/UI/node_modules
      - uiCache:/workspace/UI/.parcel-cache
      - staticWeb:/workspace/UI/dist/public
      - ./UI:/workspace/UI:delegated
      # GraphQL Schema File Generated By API
      - ./Schema.graphql:/workspace/UI/Schema.graphql:cached
      - ./local/AppTemplate.xml:/IDPMetadata.xml:ro

  SubscriberDL:
    image: docker.pkg.github.com/kristianfjones/distributed-dns/distributed-dns-subscriberdl
    restart: unless-stopped
    env_file: ENVs/SubscriberDL.env
    environment:
      API_URL: 'https://dns.kristianjones.dev'
    volumes:
      - tlsCertificates:/data/TLS
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.ouroboros.enable: 'true'

  database:
    image: postgres:alpine
    volumes:
      - databaseData:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - internalDB
    environment:
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: app-template

volumes:
  apiModules:
  uiModules:
  uiCache:
  databaseData:
  pgAdminData:
  staticWeb:
  tlsCertificates:
